For this assignment, I first studied the database schema which contained four tables: customers, sales, orders, and items. By analyzing their relationships, I understood that customers are linked to sales, sales are linked to orders, and orders reference items. From the problem statement, the requirement was to calculate the total quantities of items (x, y, z) purchased by customers aged between 18 and 35, while ignoring cases where the quantity was either NULL or zero. The output needed to be a clean CSV file with semicolon as delimiter and without decimals.

I approached the problem in two ways. In the SQL solution, I wrote a query that joined all the tables, filtered customers by age, excluded NULL quantities, and then grouped by customer and item to calculate the total quantities. I also cast the totals to integers and applied a HAVING clause to exclude any zero totals. This query result was exported into a CSV file. In the Pandas solution, I replicated the same logic in Python. I loaded all tables as DataFrames, performed merges to recreate the joins, applied filters for age and non-null quantities, and then used groupby with sum to aggregate totals. After cleaning and formatting, I saved the output in the same CSV format.

Finally, I compared the outputs from both SQL and Pandas solutions to ensure consistency. Both approaches produced identical results with 71 records in my dataset, which validated the correctness of my logic. This exercise highlights that I can implement solutions both directly at the SQL/database layer and within a Python data pipeline, ensuring flexibility depending on the use case.